ARM GAS  /tmp/cckHED2w.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"stm32h7xx_it.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "Core/Src/stm32h7xx_it.c"
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	1
  21              		.global	NMI_Handler
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB328:
   1:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32h7xx_it.c **** /**
   3:Core/Src/stm32h7xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32h7xx_it.c ****   * @file    stm32h7xx_it.c
   5:Core/Src/stm32h7xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32h7xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32h7xx_it.c ****   * @attention
   8:Core/Src/stm32h7xx_it.c ****   *
   9:Core/Src/stm32h7xx_it.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/stm32h7xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32h7xx_it.c ****   *
  12:Core/Src/stm32h7xx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/stm32h7xx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/stm32h7xx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/stm32h7xx_it.c ****   *                             www.st.com/SLA0044
  16:Core/Src/stm32h7xx_it.c ****   *
  17:Core/Src/stm32h7xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32h7xx_it.c ****   */
  19:Core/Src/stm32h7xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32h7xx_it.c **** 
  21:Core/Src/stm32h7xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32h7xx_it.c **** #include "main.h"
  23:Core/Src/stm32h7xx_it.c **** #include "stm32h7xx_it.h"
  24:Core/Src/stm32h7xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32h7xx_it.c **** /* USER CODE END Includes */
  27:Core/Src/stm32h7xx_it.c **** 
  28:Core/Src/stm32h7xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN TD */
  30:Core/Src/stm32h7xx_it.c **** 
  31:Core/Src/stm32h7xx_it.c **** /* USER CODE END TD */
ARM GAS  /tmp/cckHED2w.s 			page 2


  32:Core/Src/stm32h7xx_it.c **** 
  33:Core/Src/stm32h7xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PD */
  35:Core/Src/stm32h7xx_it.c **** 
  36:Core/Src/stm32h7xx_it.c **** /* USER CODE END PD */
  37:Core/Src/stm32h7xx_it.c **** 
  38:Core/Src/stm32h7xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PM */
  40:Core/Src/stm32h7xx_it.c **** 
  41:Core/Src/stm32h7xx_it.c **** /* USER CODE END PM */
  42:Core/Src/stm32h7xx_it.c **** 
  43:Core/Src/stm32h7xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PV */
  45:Core/Src/stm32h7xx_it.c **** 
  46:Core/Src/stm32h7xx_it.c **** /* USER CODE END PV */
  47:Core/Src/stm32h7xx_it.c **** 
  48:Core/Src/stm32h7xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PFP */
  50:Core/Src/stm32h7xx_it.c **** 
  51:Core/Src/stm32h7xx_it.c **** /* USER CODE END PFP */
  52:Core/Src/stm32h7xx_it.c **** 
  53:Core/Src/stm32h7xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN 0 */
  55:Core/Src/stm32h7xx_it.c **** 
  56:Core/Src/stm32h7xx_it.c **** /* USER CODE END 0 */
  57:Core/Src/stm32h7xx_it.c **** 
  58:Core/Src/stm32h7xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Core/Src/stm32h7xx_it.c **** extern HCD_HandleTypeDef hhcd_USB_OTG_FS;
  60:Core/Src/stm32h7xx_it.c **** extern LTDC_HandleTypeDef hltdc;
  61:Core/Src/stm32h7xx_it.c **** extern DMA_HandleTypeDef hdma_spi1_tx;
  62:Core/Src/stm32h7xx_it.c **** extern I2S_HandleTypeDef hi2s1;
  63:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN EV */
  64:Core/Src/stm32h7xx_it.c **** 
  65:Core/Src/stm32h7xx_it.c **** /* USER CODE END EV */
  66:Core/Src/stm32h7xx_it.c **** 
  67:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
  68:Core/Src/stm32h7xx_it.c **** /*           Cortex Processor Interruption and Exception Handlers          */
  69:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
  70:Core/Src/stm32h7xx_it.c **** /**
  71:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Non maskable interrupt.
  72:Core/Src/stm32h7xx_it.c ****   */
  73:Core/Src/stm32h7xx_it.c **** void NMI_Handler(void)
  74:Core/Src/stm32h7xx_it.c **** {
  28              		.loc 1 74 1 view -0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.L2:
  75:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  76:Core/Src/stm32h7xx_it.c **** 
  77:Core/Src/stm32h7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  78:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  79:Core/Src/stm32h7xx_it.c ****   while (1)
  35              		.loc 1 79 3 view .LVU1
  80:Core/Src/stm32h7xx_it.c ****   {
ARM GAS  /tmp/cckHED2w.s 			page 3


  81:Core/Src/stm32h7xx_it.c ****   }
  36              		.loc 1 81 3 view .LVU2
  79:Core/Src/stm32h7xx_it.c ****   {
  37              		.loc 1 79 9 view .LVU3
  38 0000 FEE7     		b	.L2
  39              		.cfi_endproc
  40              	.LFE328:
  42              		.section	.text.HardFault_Handler,"ax",%progbits
  43              		.align	1
  44              		.global	HardFault_Handler
  45              		.syntax unified
  46              		.thumb
  47              		.thumb_func
  49              	HardFault_Handler:
  50              	.LFB329:
  82:Core/Src/stm32h7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  83:Core/Src/stm32h7xx_it.c **** }
  84:Core/Src/stm32h7xx_it.c **** 
  85:Core/Src/stm32h7xx_it.c **** /**
  86:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Hard fault interrupt.
  87:Core/Src/stm32h7xx_it.c ****   */
  88:Core/Src/stm32h7xx_it.c **** void HardFault_Handler(void)
  89:Core/Src/stm32h7xx_it.c **** {
  51              		.loc 1 89 1 view -0
  52              		.cfi_startproc
  53              		@ Volatile: function does not return.
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57              	.L4:
  90:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  91:Core/Src/stm32h7xx_it.c **** 
  92:Core/Src/stm32h7xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  93:Core/Src/stm32h7xx_it.c ****   while (1)
  58              		.loc 1 93 3 view .LVU5
  94:Core/Src/stm32h7xx_it.c ****   {
  95:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  96:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  97:Core/Src/stm32h7xx_it.c ****   }
  59              		.loc 1 97 3 view .LVU6
  93:Core/Src/stm32h7xx_it.c ****   {
  60              		.loc 1 93 9 view .LVU7
  61 0000 FEE7     		b	.L4
  62              		.cfi_endproc
  63              	.LFE329:
  65              		.section	.text.MemManage_Handler,"ax",%progbits
  66              		.align	1
  67              		.global	MemManage_Handler
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  72              	MemManage_Handler:
  73              	.LFB330:
  98:Core/Src/stm32h7xx_it.c **** }
  99:Core/Src/stm32h7xx_it.c **** 
 100:Core/Src/stm32h7xx_it.c **** /**
 101:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Memory management fault.
ARM GAS  /tmp/cckHED2w.s 			page 4


 102:Core/Src/stm32h7xx_it.c ****   */
 103:Core/Src/stm32h7xx_it.c **** void MemManage_Handler(void)
 104:Core/Src/stm32h7xx_it.c **** {
  74              		.loc 1 104 1 view -0
  75              		.cfi_startproc
  76              		@ Volatile: function does not return.
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  80              	.L6:
 105:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 106:Core/Src/stm32h7xx_it.c **** 
 107:Core/Src/stm32h7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 108:Core/Src/stm32h7xx_it.c ****   while (1)
  81              		.loc 1 108 3 view .LVU9
 109:Core/Src/stm32h7xx_it.c ****   {
 110:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 111:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 112:Core/Src/stm32h7xx_it.c ****   }
  82              		.loc 1 112 3 view .LVU10
 108:Core/Src/stm32h7xx_it.c ****   {
  83              		.loc 1 108 9 view .LVU11
  84 0000 FEE7     		b	.L6
  85              		.cfi_endproc
  86              	.LFE330:
  88              		.section	.text.BusFault_Handler,"ax",%progbits
  89              		.align	1
  90              		.global	BusFault_Handler
  91              		.syntax unified
  92              		.thumb
  93              		.thumb_func
  95              	BusFault_Handler:
  96              	.LFB331:
 113:Core/Src/stm32h7xx_it.c **** }
 114:Core/Src/stm32h7xx_it.c **** 
 115:Core/Src/stm32h7xx_it.c **** /**
 116:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 117:Core/Src/stm32h7xx_it.c ****   */
 118:Core/Src/stm32h7xx_it.c **** void BusFault_Handler(void)
 119:Core/Src/stm32h7xx_it.c **** {
  97              		.loc 1 119 1 view -0
  98              		.cfi_startproc
  99              		@ Volatile: function does not return.
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 102              		@ link register save eliminated.
 103              	.L8:
 120:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 121:Core/Src/stm32h7xx_it.c **** 
 122:Core/Src/stm32h7xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 123:Core/Src/stm32h7xx_it.c ****   while (1)
 104              		.loc 1 123 3 view .LVU13
 124:Core/Src/stm32h7xx_it.c ****   {
 125:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 126:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 127:Core/Src/stm32h7xx_it.c ****   }
 105              		.loc 1 127 3 view .LVU14
ARM GAS  /tmp/cckHED2w.s 			page 5


 123:Core/Src/stm32h7xx_it.c ****   {
 106              		.loc 1 123 9 view .LVU15
 107 0000 FEE7     		b	.L8
 108              		.cfi_endproc
 109              	.LFE331:
 111              		.section	.text.UsageFault_Handler,"ax",%progbits
 112              		.align	1
 113              		.global	UsageFault_Handler
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 118              	UsageFault_Handler:
 119              	.LFB332:
 128:Core/Src/stm32h7xx_it.c **** }
 129:Core/Src/stm32h7xx_it.c **** 
 130:Core/Src/stm32h7xx_it.c **** /**
 131:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 132:Core/Src/stm32h7xx_it.c ****   */
 133:Core/Src/stm32h7xx_it.c **** void UsageFault_Handler(void)
 134:Core/Src/stm32h7xx_it.c **** {
 120              		.loc 1 134 1 view -0
 121              		.cfi_startproc
 122              		@ Volatile: function does not return.
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126              	.L10:
 135:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 136:Core/Src/stm32h7xx_it.c **** 
 137:Core/Src/stm32h7xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 138:Core/Src/stm32h7xx_it.c ****   while (1)
 127              		.loc 1 138 3 view .LVU17
 139:Core/Src/stm32h7xx_it.c ****   {
 140:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 141:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 142:Core/Src/stm32h7xx_it.c ****   }
 128              		.loc 1 142 3 view .LVU18
 138:Core/Src/stm32h7xx_it.c ****   {
 129              		.loc 1 138 9 view .LVU19
 130 0000 FEE7     		b	.L10
 131              		.cfi_endproc
 132              	.LFE332:
 134              		.section	.text.SVC_Handler,"ax",%progbits
 135              		.align	1
 136              		.global	SVC_Handler
 137              		.syntax unified
 138              		.thumb
 139              		.thumb_func
 141              	SVC_Handler:
 142              	.LFB333:
 143:Core/Src/stm32h7xx_it.c **** }
 144:Core/Src/stm32h7xx_it.c **** 
 145:Core/Src/stm32h7xx_it.c **** /**
 146:Core/Src/stm32h7xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 147:Core/Src/stm32h7xx_it.c ****   */
 148:Core/Src/stm32h7xx_it.c **** void SVC_Handler(void)
 149:Core/Src/stm32h7xx_it.c **** {
ARM GAS  /tmp/cckHED2w.s 			page 6


 143              		.loc 1 149 1 view -0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
 150:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 151:Core/Src/stm32h7xx_it.c **** 
 152:Core/Src/stm32h7xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 153:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 154:Core/Src/stm32h7xx_it.c **** 
 155:Core/Src/stm32h7xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 156:Core/Src/stm32h7xx_it.c **** }
 148              		.loc 1 156 1 view .LVU21
 149 0000 7047     		bx	lr
 150              		.cfi_endproc
 151              	.LFE333:
 153              		.section	.text.DebugMon_Handler,"ax",%progbits
 154              		.align	1
 155              		.global	DebugMon_Handler
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 160              	DebugMon_Handler:
 161              	.LFB334:
 157:Core/Src/stm32h7xx_it.c **** 
 158:Core/Src/stm32h7xx_it.c **** /**
 159:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Debug monitor.
 160:Core/Src/stm32h7xx_it.c ****   */
 161:Core/Src/stm32h7xx_it.c **** void DebugMon_Handler(void)
 162:Core/Src/stm32h7xx_it.c **** {
 162              		.loc 1 162 1 view -0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166              		@ link register save eliminated.
 163:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 164:Core/Src/stm32h7xx_it.c **** 
 165:Core/Src/stm32h7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 166:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 167:Core/Src/stm32h7xx_it.c **** 
 168:Core/Src/stm32h7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 169:Core/Src/stm32h7xx_it.c **** }
 167              		.loc 1 169 1 view .LVU23
 168 0000 7047     		bx	lr
 169              		.cfi_endproc
 170              	.LFE334:
 172              		.section	.text.PendSV_Handler,"ax",%progbits
 173              		.align	1
 174              		.global	PendSV_Handler
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 179              	PendSV_Handler:
 180              	.LFB335:
 170:Core/Src/stm32h7xx_it.c **** 
 171:Core/Src/stm32h7xx_it.c **** /**
 172:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Pendable request for system service.
ARM GAS  /tmp/cckHED2w.s 			page 7


 173:Core/Src/stm32h7xx_it.c ****   */
 174:Core/Src/stm32h7xx_it.c **** void PendSV_Handler(void)
 175:Core/Src/stm32h7xx_it.c **** {
 181              		.loc 1 175 1 view -0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              		@ link register save eliminated.
 176:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 177:Core/Src/stm32h7xx_it.c **** 
 178:Core/Src/stm32h7xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 179:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 180:Core/Src/stm32h7xx_it.c **** 
 181:Core/Src/stm32h7xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 182:Core/Src/stm32h7xx_it.c **** }
 186              		.loc 1 182 1 view .LVU25
 187 0000 7047     		bx	lr
 188              		.cfi_endproc
 189              	.LFE335:
 191              		.section	.text.SysTick_Handler,"ax",%progbits
 192              		.align	1
 193              		.global	SysTick_Handler
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 198              	SysTick_Handler:
 199              	.LFB336:
 183:Core/Src/stm32h7xx_it.c **** 
 184:Core/Src/stm32h7xx_it.c **** /**
 185:Core/Src/stm32h7xx_it.c ****   * @brief This function handles System tick timer.
 186:Core/Src/stm32h7xx_it.c ****   */
 187:Core/Src/stm32h7xx_it.c **** void SysTick_Handler(void)
 188:Core/Src/stm32h7xx_it.c **** {
 200              		.loc 1 188 1 view -0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204 0000 08B5     		push	{r3, lr}
 205              	.LCFI0:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 3, -8
 208              		.cfi_offset 14, -4
 189:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 190:Core/Src/stm32h7xx_it.c **** 
 191:Core/Src/stm32h7xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 192:Core/Src/stm32h7xx_it.c ****   HAL_IncTick();
 209              		.loc 1 192 3 view .LVU27
 210 0002 FFF7FEFF 		bl	HAL_IncTick
 211              	.LVL0:
 193:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 194:Core/Src/stm32h7xx_it.c **** 
 195:Core/Src/stm32h7xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 196:Core/Src/stm32h7xx_it.c **** }
 212              		.loc 1 196 1 is_stmt 0 view .LVU28
 213 0006 08BD     		pop	{r3, pc}
 214              		.cfi_endproc
 215              	.LFE336:
ARM GAS  /tmp/cckHED2w.s 			page 8


 217              		.section	.text.DMA1_Stream0_IRQHandler,"ax",%progbits
 218              		.align	1
 219              		.global	DMA1_Stream0_IRQHandler
 220              		.syntax unified
 221              		.thumb
 222              		.thumb_func
 224              	DMA1_Stream0_IRQHandler:
 225              	.LFB337:
 197:Core/Src/stm32h7xx_it.c **** 
 198:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
 199:Core/Src/stm32h7xx_it.c **** /* STM32H7xx Peripheral Interrupt Handlers                                    */
 200:Core/Src/stm32h7xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 201:Core/Src/stm32h7xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 202:Core/Src/stm32h7xx_it.c **** /* please refer to the startup file (startup_stm32h7xx.s).                    */
 203:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
 204:Core/Src/stm32h7xx_it.c **** /**
 205:Core/Src/stm32h7xx_it.c ****   * @brief This function handles DMA1 stream0 global interrupt.
 206:Core/Src/stm32h7xx_it.c ****   */
 207:Core/Src/stm32h7xx_it.c **** void DMA1_Stream0_IRQHandler(void)
 208:Core/Src/stm32h7xx_it.c **** {
 226              		.loc 1 208 1 is_stmt 1 view -0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230 0000 08B5     		push	{r3, lr}
 231              	.LCFI1:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 3, -8
 234              		.cfi_offset 14, -4
 209:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
 210:Core/Src/stm32h7xx_it.c **** 
 211:Core/Src/stm32h7xx_it.c ****   /* USER CODE END DMA1_Stream0_IRQn 0 */
 212:Core/Src/stm32h7xx_it.c ****   HAL_DMA_IRQHandler(&hdma_spi1_tx);
 235              		.loc 1 212 3 view .LVU30
 236 0002 0248     		ldr	r0, .L18
 237 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 238              	.LVL1:
 213:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
 214:Core/Src/stm32h7xx_it.c **** 
 215:Core/Src/stm32h7xx_it.c ****   /* USER CODE END DMA1_Stream0_IRQn 1 */
 216:Core/Src/stm32h7xx_it.c **** }
 239              		.loc 1 216 1 is_stmt 0 view .LVU31
 240 0008 08BD     		pop	{r3, pc}
 241              	.L19:
 242 000a 00BF     		.align	2
 243              	.L18:
 244 000c 00000000 		.word	hdma_spi1_tx
 245              		.cfi_endproc
 246              	.LFE337:
 248              		.section	.text.SPI1_IRQHandler,"ax",%progbits
 249              		.align	1
 250              		.global	SPI1_IRQHandler
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 255              	SPI1_IRQHandler:
 256              	.LFB338:
ARM GAS  /tmp/cckHED2w.s 			page 9


 217:Core/Src/stm32h7xx_it.c **** 
 218:Core/Src/stm32h7xx_it.c **** /**
 219:Core/Src/stm32h7xx_it.c ****   * @brief This function handles SPI1 global interrupt.
 220:Core/Src/stm32h7xx_it.c ****   */
 221:Core/Src/stm32h7xx_it.c **** void SPI1_IRQHandler(void)
 222:Core/Src/stm32h7xx_it.c **** {
 257              		.loc 1 222 1 is_stmt 1 view -0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261 0000 08B5     		push	{r3, lr}
 262              	.LCFI2:
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 3, -8
 265              		.cfi_offset 14, -4
 223:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN SPI1_IRQn 0 */
 224:Core/Src/stm32h7xx_it.c **** 
 225:Core/Src/stm32h7xx_it.c ****   /* USER CODE END SPI1_IRQn 0 */
 226:Core/Src/stm32h7xx_it.c ****   HAL_I2S_IRQHandler(&hi2s1);
 266              		.loc 1 226 3 view .LVU33
 267 0002 0248     		ldr	r0, .L22
 268 0004 FFF7FEFF 		bl	HAL_I2S_IRQHandler
 269              	.LVL2:
 227:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN SPI1_IRQn 1 */
 228:Core/Src/stm32h7xx_it.c **** 
 229:Core/Src/stm32h7xx_it.c ****   /* USER CODE END SPI1_IRQn 1 */
 230:Core/Src/stm32h7xx_it.c **** }
 270              		.loc 1 230 1 is_stmt 0 view .LVU34
 271 0008 08BD     		pop	{r3, pc}
 272              	.L23:
 273 000a 00BF     		.align	2
 274              	.L22:
 275 000c 00000000 		.word	hi2s1
 276              		.cfi_endproc
 277              	.LFE338:
 279              		.section	.text.LTDC_IRQHandler,"ax",%progbits
 280              		.align	1
 281              		.global	LTDC_IRQHandler
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 286              	LTDC_IRQHandler:
 287              	.LFB339:
 231:Core/Src/stm32h7xx_it.c **** /**
 232:Core/Src/stm32h7xx_it.c ****   * @brief This function handles LTDC global interrupt.
 233:Core/Src/stm32h7xx_it.c ****   */
 234:Core/Src/stm32h7xx_it.c **** void LTDC_IRQHandler(void)
 235:Core/Src/stm32h7xx_it.c **** {
 288              		.loc 1 235 1 is_stmt 1 view -0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292 0000 08B5     		push	{r3, lr}
 293              	.LCFI3:
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 3, -8
 296              		.cfi_offset 14, -4
ARM GAS  /tmp/cckHED2w.s 			page 10


 236:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN LTDC_IRQn 0 */
 237:Core/Src/stm32h7xx_it.c **** 
 238:Core/Src/stm32h7xx_it.c ****   /* USER CODE END LTDC_IRQn 0 */
 239:Core/Src/stm32h7xx_it.c ****   HAL_LTDC_IRQHandler(&hltdc);
 297              		.loc 1 239 3 view .LVU36
 298 0002 0248     		ldr	r0, .L26
 299 0004 FFF7FEFF 		bl	HAL_LTDC_IRQHandler
 300              	.LVL3:
 240:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN LTDC_IRQn 1 */
 241:Core/Src/stm32h7xx_it.c **** 
 242:Core/Src/stm32h7xx_it.c ****   /* USER CODE END LTDC_IRQn 1 */
 243:Core/Src/stm32h7xx_it.c **** }
 301              		.loc 1 243 1 is_stmt 0 view .LVU37
 302 0008 08BD     		pop	{r3, pc}
 303              	.L27:
 304 000a 00BF     		.align	2
 305              	.L26:
 306 000c 00000000 		.word	hltdc
 307              		.cfi_endproc
 308              	.LFE339:
 310              		.section	.text.LTDC_ER_IRQHandler,"ax",%progbits
 311              		.align	1
 312              		.global	LTDC_ER_IRQHandler
 313              		.syntax unified
 314              		.thumb
 315              		.thumb_func
 317              	LTDC_ER_IRQHandler:
 318              	.LFB340:
 244:Core/Src/stm32h7xx_it.c **** 
 245:Core/Src/stm32h7xx_it.c **** /**
 246:Core/Src/stm32h7xx_it.c ****   * @brief This function handles LTDC global error interrupt.
 247:Core/Src/stm32h7xx_it.c ****   */
 248:Core/Src/stm32h7xx_it.c **** void LTDC_ER_IRQHandler(void)
 249:Core/Src/stm32h7xx_it.c **** {
 319              		.loc 1 249 1 is_stmt 1 view -0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323 0000 08B5     		push	{r3, lr}
 324              	.LCFI4:
 325              		.cfi_def_cfa_offset 8
 326              		.cfi_offset 3, -8
 327              		.cfi_offset 14, -4
 250:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN LTDC_ER_IRQn 0 */
 251:Core/Src/stm32h7xx_it.c **** 
 252:Core/Src/stm32h7xx_it.c ****   /* USER CODE END LTDC_ER_IRQn 0 */
 253:Core/Src/stm32h7xx_it.c ****   HAL_LTDC_IRQHandler(&hltdc);
 328              		.loc 1 253 3 view .LVU39
 329 0002 0248     		ldr	r0, .L30
 330 0004 FFF7FEFF 		bl	HAL_LTDC_IRQHandler
 331              	.LVL4:
 254:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN LTDC_ER_IRQn 1 */
 255:Core/Src/stm32h7xx_it.c **** 
 256:Core/Src/stm32h7xx_it.c ****   /* USER CODE END LTDC_ER_IRQn 1 */
 257:Core/Src/stm32h7xx_it.c **** }
 332              		.loc 1 257 1 is_stmt 0 view .LVU40
 333 0008 08BD     		pop	{r3, pc}
ARM GAS  /tmp/cckHED2w.s 			page 11


 334              	.L31:
 335 000a 00BF     		.align	2
 336              	.L30:
 337 000c 00000000 		.word	hltdc
 338              		.cfi_endproc
 339              	.LFE340:
 341              		.section	.text.OTG_FS_IRQHandler,"ax",%progbits
 342              		.align	1
 343              		.global	OTG_FS_IRQHandler
 344              		.syntax unified
 345              		.thumb
 346              		.thumb_func
 348              	OTG_FS_IRQHandler:
 349              	.LFB341:
 258:Core/Src/stm32h7xx_it.c **** 
 259:Core/Src/stm32h7xx_it.c **** /**
 260:Core/Src/stm32h7xx_it.c ****   * @brief This function handles USB On The Go FS global interrupt.
 261:Core/Src/stm32h7xx_it.c ****   */
 262:Core/Src/stm32h7xx_it.c **** void OTG_FS_IRQHandler(void)
 263:Core/Src/stm32h7xx_it.c **** {
 350              		.loc 1 263 1 is_stmt 1 view -0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 0
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354 0000 08B5     		push	{r3, lr}
 355              	.LCFI5:
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 3, -8
 358              		.cfi_offset 14, -4
 264:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN OTG_FS_IRQn 0 */
 265:Core/Src/stm32h7xx_it.c **** 
 266:Core/Src/stm32h7xx_it.c ****   /* USER CODE END OTG_FS_IRQn 0 */
 267:Core/Src/stm32h7xx_it.c ****   HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 359              		.loc 1 267 3 view .LVU42
 360 0002 0248     		ldr	r0, .L34
 361 0004 FFF7FEFF 		bl	HAL_HCD_IRQHandler
 362              	.LVL5:
 268:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN OTG_FS_IRQn 1 */
 269:Core/Src/stm32h7xx_it.c **** 
 270:Core/Src/stm32h7xx_it.c ****   /* USER CODE END OTG_FS_IRQn 1 */
 271:Core/Src/stm32h7xx_it.c **** }
 363              		.loc 1 271 1 is_stmt 0 view .LVU43
 364 0008 08BD     		pop	{r3, pc}
 365              	.L35:
 366 000a 00BF     		.align	2
 367              	.L34:
 368 000c 00000000 		.word	hhcd_USB_OTG_FS
 369              		.cfi_endproc
 370              	.LFE341:
 372              		.text
 373              	.Letext0:
 374              		.file 2 "/home/jyko/Embedded/arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi/arm-none-eabi/includ
 375              		.file 3 "/home/jyko/Embedded/arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi/arm-none-eabi/includ
 376              		.file 4 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 377              		.file 5 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 378              		.file 6 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 379              		.file 7 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2s.h"
ARM GAS  /tmp/cckHED2w.s 			page 12


 380              		.file 8 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_ltdc.h"
 381              		.file 9 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_usb.h"
 382              		.file 10 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_hcd.h"
 383              		.file 11 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  /tmp/cckHED2w.s 			page 13


DEFINED SYMBOLS
                            *ABS*:00000000 stm32h7xx_it.c
     /tmp/cckHED2w.s:20     .text.NMI_Handler:00000000 $t
     /tmp/cckHED2w.s:26     .text.NMI_Handler:00000000 NMI_Handler
     /tmp/cckHED2w.s:43     .text.HardFault_Handler:00000000 $t
     /tmp/cckHED2w.s:49     .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/cckHED2w.s:66     .text.MemManage_Handler:00000000 $t
     /tmp/cckHED2w.s:72     .text.MemManage_Handler:00000000 MemManage_Handler
     /tmp/cckHED2w.s:89     .text.BusFault_Handler:00000000 $t
     /tmp/cckHED2w.s:95     .text.BusFault_Handler:00000000 BusFault_Handler
     /tmp/cckHED2w.s:112    .text.UsageFault_Handler:00000000 $t
     /tmp/cckHED2w.s:118    .text.UsageFault_Handler:00000000 UsageFault_Handler
     /tmp/cckHED2w.s:135    .text.SVC_Handler:00000000 $t
     /tmp/cckHED2w.s:141    .text.SVC_Handler:00000000 SVC_Handler
     /tmp/cckHED2w.s:154    .text.DebugMon_Handler:00000000 $t
     /tmp/cckHED2w.s:160    .text.DebugMon_Handler:00000000 DebugMon_Handler
     /tmp/cckHED2w.s:173    .text.PendSV_Handler:00000000 $t
     /tmp/cckHED2w.s:179    .text.PendSV_Handler:00000000 PendSV_Handler
     /tmp/cckHED2w.s:192    .text.SysTick_Handler:00000000 $t
     /tmp/cckHED2w.s:198    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/cckHED2w.s:218    .text.DMA1_Stream0_IRQHandler:00000000 $t
     /tmp/cckHED2w.s:224    .text.DMA1_Stream0_IRQHandler:00000000 DMA1_Stream0_IRQHandler
     /tmp/cckHED2w.s:244    .text.DMA1_Stream0_IRQHandler:0000000c $d
     /tmp/cckHED2w.s:249    .text.SPI1_IRQHandler:00000000 $t
     /tmp/cckHED2w.s:255    .text.SPI1_IRQHandler:00000000 SPI1_IRQHandler
     /tmp/cckHED2w.s:275    .text.SPI1_IRQHandler:0000000c $d
     /tmp/cckHED2w.s:280    .text.LTDC_IRQHandler:00000000 $t
     /tmp/cckHED2w.s:286    .text.LTDC_IRQHandler:00000000 LTDC_IRQHandler
     /tmp/cckHED2w.s:306    .text.LTDC_IRQHandler:0000000c $d
     /tmp/cckHED2w.s:311    .text.LTDC_ER_IRQHandler:00000000 $t
     /tmp/cckHED2w.s:317    .text.LTDC_ER_IRQHandler:00000000 LTDC_ER_IRQHandler
     /tmp/cckHED2w.s:337    .text.LTDC_ER_IRQHandler:0000000c $d
     /tmp/cckHED2w.s:342    .text.OTG_FS_IRQHandler:00000000 $t
     /tmp/cckHED2w.s:348    .text.OTG_FS_IRQHandler:00000000 OTG_FS_IRQHandler
     /tmp/cckHED2w.s:368    .text.OTG_FS_IRQHandler:0000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_DMA_IRQHandler
hdma_spi1_tx
HAL_I2S_IRQHandler
hi2s1
HAL_LTDC_IRQHandler
hltdc
HAL_HCD_IRQHandler
hhcd_USB_OTG_FS
